samuel.h, no.amshabat1
345906408, 206515579


1. Write what design pattern you have chosen in the 1.7 part that allows to remove the bricks from the
game, and explain what are the pros and cons of your choice of design ?

We choose to use a factory to create the different behaviors and composition to make every brick possess
her own behavior.
It all goes as the part of the design pattern "strategy" that make the code more modular and allows us to
 keep the code cleaner as well as encapsulation because we can add / change the behavior of the different
 bricks strategies and we wont have to change the implementation of the class that use such strategies.

Pros and cons :
The pros are that the use of strategies makes the code more modular and allows the use of the different
strategies without having to change the bricks implementations because we can use a general type for all
the strategies and when we change something in the strategies it doesnt affect the bricks implementation
and each brick can have its own strategy without worrying how it works inside

The cons are that we need to give a lot of information and permissions to the strategies because we cant
 do things by ourselves.
 For example we have to pass BrickerGameManager to the factory to give tomExtraBall strategies because
 the strategy cant create object herself and place it on the board, which made me feel uncomfortable
 because we shouldn't pass the main Class as a mere parameter of his own methods (at the beginning we got
 the idea to delegate some of the permissions to a new class who would manage the permissions and we
 think it would have been the best thing to do but we saw that it wasn't
 allowed in the assignment so we didnt).


2.Explain how you implemented the life visual of the player (graphic and numeric) of the part 1.8.
Briefly explain each position of the class that you implemented in the code.

We started numerically by identifying the initial number of lives allowed and we displayed this text on
the screen. Then to indicate to the player that he should pay attention to his lives, we organized the
numbers by color (red for 1 life, yellow for 2, green for more) where green is the default color.
Another important thing that we made is that we implemented a numeric counter of the user left lives so
he could read more easily the information that he receive from the game.
This method of updating lives allowed us to retrieve the current number of lives from the livescounter
and updates the textrenderable and the color of the object correspondingly.

    Methods:

    Constructor: Sets up the counter with the initial number of lives. It creates a TextRenderable object
    to display the number of lives numerically. The text color is set to the default color (green).

    update(float deltaTime): Updates the displayed number of lives based on the current value of
    livesCounter. It also calls updateColor() to adjust the color based on the number of remaining lives.

    updateColor(): Changes the color of the numeric display according to the number of remaining lives
    (red for 1 life, yellow for 2 lives, green for more).


For our Graphic representation of lives, we created an array of graphical icons in the form of
heart objects that displayed the initial number of lives the player has. We used the initiatehearts
method which creates heart icons at the beginning of the game that are equal to the initial number of
lives. As the game progresses we used an updating methods where we add or remove heart icons to
correspond with the current number of lives that the player has. For instance, the updating method checks
with the LivesCounter and updates the array of hearts. Creating the hearts was thus a critical component
of this process so we created a createheart method that is responsible for the creation of each
individual heart icon. This method uses its index to calculate the position for each heart and then adds
it to the game.

    Methods:

    Constructor: Initializes the graphical life counter with the specified position, dimensions, heart
    image, initial number of lives, and the game objects collection. It calls initiateHearts() to create
    heart icons for the initial number of lives.

    initiateHearts(): Creates heart icons based on the initial number of lives and places them in the
    game world.

    update(float deltaTime): Adjusts the number of displayed heart icons to match the current number of
    lives. It adds new hearts or removes existing ones based on the change in the number of lives.

    createHeart(int heartId): Creates a single heart icon at a specified position determined by heartId.


3. Explain briefly how you implemented every one of the different special behaviors except double
explain the use of every class you added (if you added some).

1. BasicCollisionStrategy:
   - Function: Provides a foundational response to collisions, typically involving removing the
      colliding object from the game.
   - Impact: Serves as the groundwork for more specialized strategies, ensuring basic game mechanics
      like object removal are handled efficiently.

2. ExtraPaddleStrategy: Extends BasicCollisionStrategy.
   - Function: Activated during certain collisions to add an additional paddle into the game.
   - Impact: Enhances gameplay by providing players with extra means to control and interact with the
      game elements, potentially making it easier to play or adding a new layer of strategy, The effect
      is removed after 4 collisions between the extra paddle and any ball.

3. ExtraBallsStrategy: Extends BasicCollisionStrategy.
   - Function: Responds to certain collisions by adding more balls into the game.
   - Impact: Increases the difficulty and unpredictability of the game, as players must manage and
      respond to multiple balls simultaneously.

4. CameraChangeStrategy: Extends BasicCollisionStrategy.
   - Function: Alters the camera's focus to follow the ball in the wake of a collision.
   - Impact: Creates a dynamic and immersive visual experience, potentially altering the player's
     perception and strategy as the game's focus shifts, the effect is removed after 4 collisions.

5. ExtraLifeStrategy: Extends BasicCollisionStrategy.
     - Function: Triggers upon specific collisions to create a `Heart` object, which represents an
      extra life.
     - Impact: Increases the player's life count, allowing for extended gameplay and offering a cushion
       against future mistakes or challenges.

Each class is designed with key OOP principles like encapsulation, polymorphism, and inheritance,
contributing to a well-structured, modular, and maintainable codebase for the "Bricker" game.


4. Explain how you implemented the double behavior in the 2.2.5 part, explain which design pattern you
used in your code and how did you restrained the number of life to 3.

When a brick is created it can receive the double power behavior
for the sack of explaining lets say the brick received the double power so when a ball would come in
contact with the brick it would activate the on collision method which would use the double power
strategy.

The strategy goes as follow :
We would invoke the factory and create 2 new strategies (we modified the factory so it could be used
specifically for this with the use of a operation key. (like a operation code but just with an int))
Each strategy would be activated on creation and the effect would be released on game like a regular
behavior.

We took care not to delete multiple times the brick which would have led to some problems and bugs by
telling if the strategy was the original strategy. If it is we trigger the super on Collision of
BaciCollisionStrategy which delete the brick and we trigger the power and if its not we just trigger the
power effect.

we implemented the double power with having in mind the idea that it was a DECORATOR and even if we didnt
 use the decorator as a real decorator ( func = decorate(func)) because it wasn't practical in our code,
 we kept the idea of it and replaced the initial function behavior by the behaviors we received from the
 factory.

we restrained our code to only 3 double power by creating a static counter that would follow how many
Double Power were created and used by this activation of double power, and when it would reach 3 wouldn't
let the factory create more Double Powers but just regular powers. At the end of the event we reset the
counter to zero for the next call.


5. If in the part 2 you did changes in the api of the part 1 explain briefly why did you have to make
that changes.

The paddle remain unchanged.

The brick remain unchanged.

The graphic and numeric counters has also been modified to support the add of lives by the extra life
behavior.

The basic collision strategy has remain relation unchanged.

The BrickerGameManager class received several new public methods to support the implementation of the new
 extra powers.

 public FactoryCollisionStrategy: createStrategyFactory()
 This function create a factory of strategy and return it, its useful for the brick but also for the
 double power which create random strategies.

 Originally this function was private but because she can be used elsewhere we decided to made her public
  to avoid duplicate code.

 public void createMockBalls(GameObject thisObj)
 This function create the mock balls since none has the permissions to create objects and add it to the
 game but BrickerGameManager himself.

 public void activateCamera and deactivateCamera are two functions that activate and deactivate the
 camera correspond by need. this is necessary do to the fact that only game manager can add and remove a
 uniq power of the camera.

we have also added a new package called utils. that the main purposes of this package is to hold all of
the constants of the interr game. this help in cases that we want to adjust our params.